// <auto-generated />
using System;
using Dipl.Business;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dipl.Business.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250501123957_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Dipl.Business.Entities.RequestLink", b =>
                {
                    b.Property<Guid>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("AllFilesSizeLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllowedExtensions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LinkTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotifyOnUpload")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("VerifierHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("VerifierSalt")
                        .HasColumnType("BLOB");

                    b.HasKey("LinkId");

                    b.HasIndex("CreatedById");

                    b.ToTable("RequestLinks");
                });

            modelBuilder.Entity("Dipl.Business.Entities.RequestLinkUploadSlot", b =>
                {
                    b.Property<Guid>("RequestLinkUploadSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RequestLinkId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Uploaded")
                        .HasColumnType("TEXT");

                    b.HasKey("RequestLinkUploadSlotId");

                    b.HasIndex("RequestLinkId");

                    b.ToTable("RequestLinkUploadSlots");
                });

            modelBuilder.Entity("Dipl.Business.Entities.UploadLink", b =>
                {
                    b.Property<Guid>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("BLOB");

                    b.Property<DateTime?>("Uploaded")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("VerifierHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("VerifierSalt")
                        .HasColumnType("BLOB");

                    b.HasKey("LinkId");

                    b.HasIndex("CreatedById");

                    b.ToTable("UploadLinks");
                });

            modelBuilder.Entity("Dipl.Business.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "f55aa676-775d-4312-b31c-e9d5848e06d7",
                            Email = "guest@example.com",
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Dipl.Business.Entities.RequestLink", b =>
                {
                    b.HasOne("Dipl.Business.Entities.User", "CreatedBy")
                        .WithMany("RequestLinks")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Dipl.Business.Entities.RequestLinkUploadSlot", b =>
                {
                    b.HasOne("Dipl.Business.Entities.RequestLink", "RequestLink")
                        .WithMany("UploadSlots")
                        .HasForeignKey("RequestLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestLink");
                });

            modelBuilder.Entity("Dipl.Business.Entities.UploadLink", b =>
                {
                    b.HasOne("Dipl.Business.Entities.User", "CreatedBy")
                        .WithMany("UploadLinks")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Dipl.Business.Entities.RequestLink", b =>
                {
                    b.Navigation("UploadSlots");
                });

            modelBuilder.Entity("Dipl.Business.Entities.User", b =>
                {
                    b.Navigation("RequestLinks");

                    b.Navigation("UploadLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
