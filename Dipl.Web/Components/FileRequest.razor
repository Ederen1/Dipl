@using Dipl.Business.Models
@using Dipl.Business.Services
@implements IAsyncDisposable

@inject RequestLinksService RequestLinksService
@inject IConfiguration Configuration

@if (!_closed)
{
    <Validations @ref="_validations" ValidateOnLoad="false">
        <Validation Validator="ValidateEmails" @bind-Status="_emailToValidationStatus">
            <Field>
                <FieldLabel>Send to</FieldLabel>
                <FieldBody>
                    <MultipleEmailEdit ValidationStatus="_emailToValidationStatus"
                                       @bind-Value="_createModel.SendTo"></MultipleEmailEdit>
                    @if (_emailToValidationStatus == ValidationStatus.Error)
                    {
                        <Span TextColor="TextColor.Danger"
                              TextSize="TextSize.Small">Enter at least one valid email address</Span>
                    }
                </FieldBody>
            </Field>
        </Validation>

        <Validation Validator="ValidationRule.IsNotEmpty">
            <Field>
                <FieldLabel>Link name</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@_createModel.LinkName" Placeholder="Enter link name...">
                        <Feedback>
                            <ValidationError>Enter link name</ValidationError>
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>

        <Field>
            <FieldLabel>Message for user</FieldLabel>
            <FieldBody>
                <MemoEdit Rows="5" @bind-Text="@_createModel.MessageForUser"
                          Placeholder="Message for user..."></MemoEdit>
            </FieldBody>
        </Field>

        @if (Configuration.GetValue<bool>("EncryptedRequests"))
        {
            <Fields>
                <Validation Validator="ValidatePassword">
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                        <FieldLabel>Password</FieldLabel>
                        <FieldBody>
                            <TextEdit Role="TextRole.Password" @bind-Text="@_createModel.Password"
                                      Placeholder="Password..." Disabled="_closed">
                                <Feedback>
                                    <ValidationError>Password must be at least 8 letters long</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>

                <Validation Validator="ValidateMatchingPassword">
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                        <FieldLabel>Confirm password</FieldLabel>
                        <FieldBody>
                            <TextEdit Role="TextRole.Password" @bind-Text="@_createModel.MatchingPassword"
                                      Placeholder="Confirm password..." Disabled="_closed">
                                <Feedback>
                                    <ValidationError>Passwords do not match</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </Fields>
        }

        <Fields>
            <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                <FieldLabel>File size limit</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <NumericEdit Placeholder="Unlimited" @bind-Value="@_createModel.SizeLimitPremultiplied"/>
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Select Style="max-width: max-content;" @bind-SelectedValue="_createModel.SizeLimitMultiplier"
                                TValue="long">
                            <SelectItem Value="1">B</SelectItem>
                            <SelectItem Value="1024">KB</SelectItem>
                            <SelectItem Value="1048576">MB</SelectItem>
                            <SelectItem Value="1073741824">GB</SelectItem>
                            <SelectItem Value="1099511627776">TB</SelectItem>
                        </Select>
                    </Addon>

                </Addons>
            </Field>

            <Validation Validator="IsValidExtensionList">
                <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
                    <Field>
                        <FieldLabel>
                            Allowed file extensions
                        </FieldLabel>
                        <TextEdit TextChanged="SetAllowedExtensions" Placeholder=".pdf, .docx...">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Field>
            </Validation>

            <Field Margin="Margin.Is4.FromEnd" ColumnSize="ColumnSize.IsAuto.OnDesktop.Is12.OnMobile">
                <Field Horizontal>
                    <FieldBody>
                        <Check @bind-Checked="@_createModel.NotifyOnUpload">
                            Notify me when files are uploaded
                        </Check>
                    </FieldBody>
                </Field>
                <Field Horizontal>
                    <FieldBody>
                        <Check @bind-Checked="@_createModel.IsProtected">
                            Validate email before upload
                        </Check>
                    </FieldBody>
                </Field>
            </Field>
        </Fields>
        <Button Width="Width.Is100" Color="Color.Primary" Type="ButtonType.Submit" Clicked="Submit">Create Link</Button>
    </Validations>
}
else
{
    <div>Request link created</div>
    <Button Margin="Margin.Is2.FromTop" Color="Color.Primary" Clicked="GoBack">Go back</Button>
}


@code {
    private Validations _validations = null!;
    private RequestLinkCreateModel _createModel = new();
    private ValidationStatus _emailToValidationStatus = ValidationStatus.None;
    private readonly CancellationTokenSource _cts = new();
    private bool _closed;

    public async ValueTask DisposeAsync()
    {
        await _cts.CancelAsync();
        _cts.Dispose();
    }

    private async Task Submit()
    {
        if (!await _validations.ValidateAll())
            return;

        await RequestLinksService.CreateLink(_createModel);
        _closed = true;
    }

    private void ValidateEmails(ValidatorEventArgs e)
    {
        e.Status = !_createModel.SendTo.Any() ? ValidationStatus.Error : ValidationStatus.Success;
    }

    private void GoBack()
    {
        _closed = false;
        _createModel = new RequestLinkCreateModel();
    }

    private static void IsValidExtensionList(ValidatorEventArgs e)
    {
        var value = Convert.ToString(e.Value);
        var split = value?.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);

        if (value?.Length > 100)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "The list of extensions is too long";
        }
        else if (split is not null && split.Any(entry => entry.Count(x => x == '.') != 1))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Specify extensions in format .pdf, .docx, .txt";
        }
    }

    private void SetAllowedExtensions(string value)
    {
        var split = value.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
        _createModel.AllowedExtensions = split;
    }

    private static void ValidatePassword(ValidatorEventArgs e)
    {
        var pass = Convert.ToString(e.Value);
        if (string.IsNullOrEmpty(pass))
            return;

        if (pass?.Length < 8)
            e.Status = ValidationStatus.Error;
    }

    private void ValidateMatchingPassword(ValidatorEventArgs e)
    {
        var pass = Convert.ToString(e.Value);
        if (string.IsNullOrEmpty(_createModel.Password) && string.IsNullOrEmpty(pass))
            return;

        if (pass?.Length < 8 && _createModel.Password != pass)
            e.Status = ValidationStatus.Error;
    }

}