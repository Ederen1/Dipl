@using Dipl.Business.Models
@using Dipl.Business.Services
@implements IAsyncDisposable

@inject ILogger<FileRequest> Logger
@inject RequestLinksService RequestLinksService
@inject UserAuthenticationService UserAuthenticationService

@rendermode InteractiveServer

<Validations @ref="_validations" ValidateOnLoad="false">
    <Validation Validator="ValidateEmails" @bind-Status="_emailToValidationStatus">
        <Field>
            <FieldLabel>Send to</FieldLabel>
            <FieldBody>
                <MultipleEmailEdit ValidationStatus="_emailToValidationStatus" @bind-Value="_model.SendTo"></MultipleEmailEdit>
                @if (_emailToValidationStatus == ValidationStatus.Error)
                {
                    <Span TextColor="TextColor.Danger" TextSize="TextSize.Small">Enter at least one valid email address</Span>
                }
            </FieldBody>
        </Field>
    </Validation>

    <Validation Validator="ValidationRule.IsNotEmpty">
        <Field>
            <FieldLabel>Link name</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="@_model.LinkName" Placeholder="Enter link name...">
                    <Feedback>
                        <ValidationError>Enter link name</ValidationError>
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>

    <Field>
        <FieldLabel>Message for user</FieldLabel>
        <FieldBody>
            <MemoEdit Rows="5" @bind-Text="@_model.MessageForUser" Placeholder="Message for user..."></MemoEdit>
        </FieldBody>
    </Field>

    <Field>
        <Check @bind-Checked="@_model.NotifyOnUpload">
            Notify me when files are uploaded
        </Check>
    </Field>

    <Button Width="Width.Is100" Color="Color.Primary" Type="ButtonType.Submit" Clicked="Submit">Create Link</Button>
</Validations>

@code {
    private Validations _validations = null!;
    private RequestLinkModel _model = new();
    private string _guestEmail = "";
    private ValidationStatus _emailToValidationStatus = ValidationStatus.None;
    private CancellationTokenSource _cts = new();

    public async ValueTask DisposeAsync()
    {
        await _cts.CancelAsync();
        _cts.Dispose();
    }

    private async Task Submit()
    {
        if (!await _validations.ValidateAll())
            return;

        await RequestLinksService.CreateLink(_model);
    }

    private void ValidateEmails(ValidatorEventArgs e)
    {
        e.Status = !_model.SendTo.Any() ? ValidationStatus.Error : ValidationStatus.Success;
    }
}