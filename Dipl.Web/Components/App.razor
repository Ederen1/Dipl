<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link href="main.css" rel="stylesheet"/>
    <link href="Dipl.Web.styles.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link href="_content/Blazorise.Icons.FontAwesome/v6/css/all.min.css" rel="stylesheet">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet"/>
    <link href="_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css" rel="stylesheet"/>
    <HeadOutlet @rendermode="InteractiveServer"/>
</head>

<body>
<Routes @rendermode="InteractiveServer"/>
<script src="_framework/blazor.web.js"></script>
<script>
    window.setupPicker = () => {
        let picker = document.querySelector("#picker input");
        picker.onclick = (e) => {
            e.preventDefault();
        }
        let pickerContainer = document.querySelector("#picker");
        pickerContainer.ondragenter = () => pickerContainer.classList.add("dragover");
        pickerContainer.ondragover = () => pickerContainer.classList.add("dragover");
        pickerContainer.ondragleave = () => pickerContainer.classList.remove("dragover");
    }

    window.downloadPasswordProtectedFile = async (url, password) => {
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                ...(password && {'X-DownloadAuth': password}),
                'Accept': 'application/octet-stream'
            }
        });

        if (!response.ok){
            return await response.text();
        }

        const blob = await response.blob();
        const objectURL = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = objectURL;
        a.download = window.getFilenameFromDisposition(response.headers.get('Content-Disposition'));
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
    }

    window.getFilenameFromDisposition = (header) => {
        if (!header) return null;

        // Attempt to extract filename* (RFC 5987)
        const filenameStarMatch = header.match(/filename\*\s*=\s*([^;]+)/i);
        if (filenameStarMatch) {
            const value = filenameStarMatch[1].trim();
            // Expected format: UTF-8''encoded-filename
            const parts = value.split("''");
            if (parts.length === 2) {
                try {
                    return decodeURIComponent(parts[1]);
                } catch (e) {
                    console.warn('Failed to decode filename*:', e);
                }
            }
        }

        // Attempt to extract filename
        const filenameMatch = header.match(/filename\s*=\s*(?:(["'])(.*?)\1|([^;]+))/i);
        if (filenameMatch) {
            return filenameMatch[2] || filenameMatch[3];
        }

        return null;
    }
</script>
</body>

</html>