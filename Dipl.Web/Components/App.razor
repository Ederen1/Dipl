<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link href="main.css" rel="stylesheet"/>
    <link href="Dipl.Web.styles.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link href="_content/Blazorise.Icons.FontAwesome/v6/css/all.min.css" rel="stylesheet">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet"/>
    <link href="_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css" rel="stylesheet"/>
    <HeadOutlet @rendermode="InteractiveServer"/>
</head>

<body>
<Routes @rendermode="InteractiveServer"/>
<script src="_framework/blazor.web.js"></script>
<script src="https://cdn.jsdelivr.net/npm/web-streams-polyfill@2.0.2/dist/ponyfill.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/streamsaver@2.0.3/StreamSaver.min.js"></script>
<script>
    window.globalFileUplaodStore = [];
    window.setupPicker = () => {
        let picker = document.querySelector("#picker input");
        picker.onclick = (e) => {
            e.preventDefault();
        }

        window.globalFileUplaodStore = [];
        picker.onchange = (e) => {
            window.globalFileUplaodStore.push(...e.currentTarget.files);
        }

        let pickerContainer = document.querySelector("#picker");
        pickerContainer.ondragenter = () => pickerContainer.classList.add("dragover");
        pickerContainer.ondragover = () => pickerContainer.classList.add("dragover");
        pickerContainer.ondragleave = () => pickerContainer.classList.remove("dragover");
    }

    window.downloadPasswordProtectedFile = async (url, password) => {
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                ...(password && {'X-DownloadAuth': password}),
                'Accept': 'application/octet-stream'
            }
        });

        if (!response.ok) {
            return await response.text();
        }

        const streamSaver = window.streamSaver
        const name = window.getFilenameFromDisposition(response.headers.get('Content-Disposition'));
        const stream = response.body;
        const contentLength = response.headers.get('Content-Length');
        const fileStream = streamSaver.createWriteStream(name, {
            size: contentLength
        });

        if (window.WritableStream && stream.pipeTo) {
            return stream.pipeTo(fileStream)
                .then(() => console.log('done writing'))
        }

        window.writer = fileStream.getWriter()

        const reader = res.body.getReader()
        const pump = () => reader.read()
            .then(res => res.done
                ? writer.close()
                : writer.write(res.value).then(pump))

        pump()
    }

    window.getFilenameFromDisposition = (header) => {
        if (!header) return null;

        // Attempt to extract filename* (RFC 5987)
        const filenameStarMatch = header.match(/filename\*\s*=\s*([^;]+)/i);
        if (filenameStarMatch) {
            const value = filenameStarMatch[1].trim();
            // Expected format: UTF-8''encoded-filename
            const parts = value.split("''");
            if (parts.length === 2) {
                try {
                    return decodeURIComponent(parts[1]);
                } catch (e) {
                    console.warn('Failed to decode filename*:', e);
                }
            }
        }

        // Attempt to extract filename
        const filenameMatch = header.match(/filename\s*=\s*(?:(["'])(.*?)\1|([^;]+))/i);
        if (filenameMatch) {
            return filenameMatch[2] || filenameMatch[3];
        }

        return null;
    }

    window.uploadFiles = (linkId, slotId, password) => {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            const formData = new FormData();

            formData.append('linkId', linkId);
            if (slotId)
                formData.append('slotId', slotId);
            if (password && password.length > 0)
                formData.append('password', password);

            for (let file of window.globalFileUplaodStore) {
                formData.append('file', file);
            }

            const fileStack = [...window.globalFileUplaodStore];
            const progressBars = document.querySelectorAll("div[id^='js-progress-']");
            const progressBarMap = {};
            for (const bar of progressBars) {
                progressBarMap[bar.id] = bar.querySelector("div.progress-bar");
            }

            xhr.upload.addEventListener('progress', (e) => {
                const bytes = e.loaded;
                let acc = 0;

                for (let file of fileStack) {
                    if (bytes > acc + file.size) {
                        progressBarMap['js-progress-' + file.name].style.width = '100%';
                    } else if (bytes > acc) {
                        const currentProgressInFile = Math.round(((bytes - acc) / file.size) * 100);
                        progressBarMap['js-progress-' + file.name].style.width = `${currentProgressInFile}%`;
                    }

                    acc += file.size;
                }
            });

            xhr.addEventListener('load', () => {
                if (xhr.status >= 200 && xhr.status < 300) {
                    console.log('Upload complete:', xhr.responseText);
                    resolve()
                } else {
                    console.error('Upload failed with status', xhr.status);
                    reject()
                }
            });

            // Send the request
            xhr.open('POST', "/uploadFiles");
            xhr.send(formData);
        })
    }
</script>
</body>

</html>