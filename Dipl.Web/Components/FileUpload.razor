@using System.Diagnostics
@using Dipl.Business.Entities
@using Dipl.Business.Services
@using Dipl.Common.Types
@using Dipl.Web.Models
@using Dipl.Web.Services
@implements IAsyncDisposable

@inject ILogger<FileUpload> Logger
@inject FileManagerService FileManagerService
@inject UserAuthenticationService UserAuthenticationService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime

@if (_currentUploadLink != null)
{
    <Row>
        <Column Padding="Padding.Is0.FromEnd" ColumnSize="ColumnSize.IsAuto" Class="align-self-center">
            Copy link:
        </Column>
        <Column>
            <Div Class="input-group">
                <TextEdit Disabled="true"
                          Text="@($"{NavigationManager.BaseUri}link/{_currentUploadLink!.LinkId}")"></TextEdit>
                <Button Color="Color.Secondary" Clicked="CopyToClipboard">Copy</Button>
            </Div>
        </Column>
    </Row>
}

@if (_closed && !_canViewAfterClose)
{
    <div>Upload link created</div>
    <Button Margin="Margin.Is2.FromTop" Color="Color.Primary" Clicked="GoBack">Go back</Button>
}
else
{
    <Validations @ref="_validations" ValidateOnLoad="false">
        <AuthorizeView>
            <NotAuthorized>
                <Validation Validator="ValidationRule.IsEmail">
                    <Field>
                        <FieldLabel>Your email</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text="@_model.GuestEmail" Role="TextRole.Email" Placeholder="Your email..."
                                      Disabled="_disableEdit">
                                <Feedback>
                                    <ValidationError>Enter valid email address</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
            </NotAuthorized>
        </AuthorizeView>

        <Validation Validator="ValidateEmails" @bind-Status="_emailToValidationStatus">
            <Field>
                <FieldLabel>Email to</FieldLabel>
                <FieldBody>
                    <MultipleEmailEdit ValidationStatus="_emailToValidationStatus"
                                       @bind-Value="_model.EmailTo" Disabled="_disableEdit"></MultipleEmailEdit>
                    @if (_emailToValidationStatus == ValidationStatus.Error)
                    {
                        <Span TextColor="TextColor.Danger"
                              TextSize="TextSize.Small">Enter at least one valid email address</Span>
                    }
                </FieldBody>
            </Field>
        </Validation>


        <Validation Validator="ValidationRule.IsNotEmpty">
            <Field>
                <FieldLabel>Title</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@_model.LinkTitle" Placeholder="Link title..." Disabled="_disableEdit">
                        <Feedback>
                            <ValidationError>Enter link title</ValidationError>
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>

        <Fields>
            <Validation Validator="ValidatePassword">
                <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                    <FieldLabel>Password</FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" @bind-Text="@_model.Password" Placeholder="Password..."
                                  Disabled="_disableEdit || _currentUploadLink is not null">
                            <Feedback>
                                <ValidationError>Password must be at least 8 letters long</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>

            <Validation Validator="ValidateMatchingPassword">
                <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                    <FieldLabel>Confirm password</FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" @bind-Text="@_model.MatchingPassword"
                                  Placeholder="Confirm password..."
                                  Disabled="_disableEdit || _currentUploadLink is not null">
                            <Feedback>
                                <ValidationError>Passwords do not match</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>
        </Fields>

        <Field>
            <FieldLabel>Message for user</FieldLabel>
            <FieldBody>
                <MemoEdit Rows="5" @bind-Text="@_model.MessageForUser" Placeholder="Message for user..."
                          Disabled="_disableEdit"></MemoEdit>
            </FieldBody>
        </Field>

        <Field>
            <FieldLabel>Upload files here</FieldLabel>
            <FieldBody>
                <Dipl.Web.Components.FilePicker @bind-Value="_model.FilesToUpload"
                                                @bind-DeleteOnlyValue="_alreadyPresentFiles" Disabled="_disableEdit"/>
            </FieldBody>
        </Field>

        @if (_canReopen && _closed)
        {
            <Button Width="Width.Is100" Color="Color.Success"
                    Clicked="() => { _closed = false; _disableEdit = false; }">Reopen
            </Button>
            <Button Width="Width.Is100" Margin="Margin.Is2.FromTop" Color="Color.Primary" Clicked="GoBack">Go back</Button>
        }
        else if (!_closed)
        {
            <Button Disabled="_submitDisabled" Width="Width.Is100" Color="Color.Primary" Type="ButtonType.Submit"
                    Clicked="Submit">Submit
            </Button>
        }


    </Validations>
}


@code {
    private Validations _validations = null!;
    private FileUploadModel _model = new();
    private List<FileInfo> _alreadyPresentFiles = [];
    private ValidationStatus _emailToValidationStatus = ValidationStatus.None;
    private readonly CancellationTokenSource _cts = new();
    private bool _canViewAfterClose;
    private bool _canReopen;
    private UploadLink? _currentUploadLink;
    private bool _closed;
    private bool _disableEdit;
    private bool _submitDisabled;

    protected override void OnParametersSet()
    {
        _canViewAfterClose = Configuration.GetValue<bool>("ClosedLinkCanView");
        _canReopen = Configuration.GetValue<bool>("ClosedLinkCanReopen");
    }

    public async ValueTask DisposeAsync()
    {
        await _cts.CancelAsync();
        _cts.Dispose();
    }

    private async Task Submit()
    {
        if (!await _validations.ValidateAll())
            return;

        if (_model.FilesToUpload.Count == 0 && _alreadyPresentFiles.Count == 0)
            return;

        _disableEdit = true;
        _submitDisabled = true;
        var timestamp = Stopwatch.GetTimestamp();
        (_currentUploadLink, _alreadyPresentFiles) = await FileManagerService.UploadAllToFolder(_model, _currentUploadLink, _alreadyPresentFiles);
        Logger.LogWarning("Time to upload: {}", Stopwatch.GetElapsedTime(timestamp));
        _submitDisabled = false;
        _model.FilesToUpload.Clear();
        _closed = true;
    }

    private void ValidateEmails(ValidatorEventArgs e)
    {
        e.Status = !_model.EmailTo.Any() ? ValidationStatus.Error : ValidationStatus.Success;
    }

    private void GoBack()
    {
        _closed = false;
        _model = new FileUploadModel();
        _disableEdit = false;
        _submitDisabled = false;
        _currentUploadLink = null;
        _alreadyPresentFiles = [];
    }

    private async Task CopyToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", $"{NavigationManager.BaseUri}link/{_currentUploadLink!.LinkId}");
    }

    private static void ValidatePassword(ValidatorEventArgs e)
    {
        var pass = Convert.ToString(e.Value);
        if (string.IsNullOrEmpty(pass))
            return;

        if (pass?.Length < 8)
            e.Status = ValidationStatus.Error;
    }

    private void ValidateMatchingPassword(ValidatorEventArgs e)
    {
        var pass = Convert.ToString(e.Value);
        if (string.IsNullOrEmpty(_model.Password) && string.IsNullOrEmpty(pass))
            return;

        if (pass?.Length < 8 && _model.Password != pass)
            e.Status = ValidationStatus.Error;
    }

}