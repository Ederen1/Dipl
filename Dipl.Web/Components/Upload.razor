@using Dipl.Business.Services
@using System.Security.Claims
@using Common.Types;
@using Dipl.Web.Components.Enums;
@using Common.Extensions;
@using Dipl.Business.Models;
@using Dipl.Business.Extensions;
@using Business.Entities;
@inject NavigationManager Navigator
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject FileManagerService FileManager
@inject LinksService LinksService
@rendermode RenderMode.InteractiveServer

<div class="container">
    @if (Type == UploadType.Upload)
    {
        <input type="text" placeholder="Folder name... (optional)" @bind="FolderName">
    }

    @if (CanShowUploadLink())
    {
        <div class="mt-2">
            <h3>Download link: </h3>
            <a href="@(Navigator.BaseUri)link/@Link!.LinkId">@(Navigator.BaseUri)link/@Link.LinkId</a>
        </div>
    }

    <div class="m-5 position-relative">
        <div class="fileText">
            <h2>Drop files to upload.</h2>
        </div>
        <InputFile class="fileDrop btn btn-light w-100" OnChange="FileDrop" multiple>
        </InputFile>
    </div>

    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Remove</th>
                <th>Done</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in Files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>
                        @if (!file.Done)
                        {
                            <button class="btn btn-danger" @onclick="() => CancelUpload(file)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-danger" @onclick="() => RemoveFromList(file)">Remove</button>
                        }

                    </td>
                    <td>
                        @if (file.Done)
                        {
                            <div class="text-success">Done!</div>
                        }
                        else
                        {
                            <progress class="progress" max="100" value="@file.Progress"></progress>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>

</div>

@code {
    [Parameter]
    public UploadType Type { get; set; } = UploadType.Upload;

    [Parameter]
    public Guid? LinkId { get; set; }

    private Link? Link { get; set; }

    string FolderName { get; set; } = "";
    List<UploadFileModel> Files { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        if (LinkId is not null){
            Link = await LinksService.Get(LinkId.Value);
        }
    }

        private async Task FileDrop(InputFileChangeEventArgs obj)
    {
        var files = obj.GetMultipleFiles(10000);
        var userInfo = await GetUserIdentity();

        AddFilesToList(files);
        await SetupFolderLazy(userInfo);

        foreach (var file in Files)
        {
            var token = file.CancellationTokenSource.Token;

            try
            {
                await using var stream = file.OpenReadStream(53_687_091_200, token);
                await FileManager.UploadFile(Link!.Folder, file.Name, stream, (progress) =>
                {
                    var oldProgress = file.Progress;
                    file.Progress = (int)(progress * 100 / stream.Length);
                    
                    if (oldProgress != file.Progress){}
                        StateHasChanged();
                }, token);
            }
            catch (OperationCanceledException)
            {
                await RemoveFromList(file);
                StateHasChanged();
                continue;
            };

            file.Progress = 100;
        }
    }

    private async Task SetupFolderLazy(User? userInfo)
    {
        if (Link is not null)
        {
            await FileManager.CreateFolder(Link.Folder);
        }
        else
        {
            var uploadFolder = await FileManager.SetupFolderForUpload(FolderName, userInfo);
            Link = await LinksService.GenerateLink(uploadFolder, userInfo);    
        }
    }

    private void AddFilesToList(IEnumerable<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            if (Files.Any(x => x.Name == file.Name))
                continue; // TODO: Show possibility to replace file

            Files.Add(new UploadFileModel
                {
                    Name = file.Name,
                    Size = file.Size,
                    OpenReadStream = file.OpenReadStream,
                    CancellationTokenSource = new CancellationTokenSource()
                });
        }
    }

    private async Task<User?> GetUserIdentity()
    {
        var identity = (await GetAuthenticationStateAsync.GetAuthenticationStateAsync()).User.Identity as ClaimsIdentity;

        if (identity == null || identity.IsAuthenticated == false)
            return null;

        return identity.MapToUser();
    }


    private async Task RemoveFromList(UploadFileModel file)
    {
        if (file.Done)
        {
            await FileManager.DeleteFile(Link!.Folder, file.Name);
        }
        Files.Remove(file);
    }

    private bool CanShowUploadLink()
    {
        return Type != UploadType.Requested && Link is not null && Files.Any() && Files.All(file => file.Done);
    }

    private void CancelUpload(UploadFileModel file)
    {
        file.CancellationTokenSource.Cancel();
    }
}