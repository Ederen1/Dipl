@* @using System.Security.Claims *@
@* @using Dipl.Business.Entities *@
@* @using Dipl.Business.Extensions *@
@* @using Dipl.Business.Models *@
@* @using Dipl.Business.Services *@
@* @using Dipl.Web.Components.Enums *@
@* @using Link = Dipl.Business.Entities.Link *@
@* @inject NavigationManager Navigator *@
@* @inject AuthenticationStateProvider GetAuthenticationStateAsync *@
@* @inject FileManagerService FileManager *@
@* @inject LinksService LinksService *@
@* @rendermode InteractiveServer *@
@* *@
@* <div class="container"> *@
@*     @if (Link?.LinkClosed == false) *@
@*     { *@
@*         <div class="my-4 position-relative"> *@
@*             <div class="fileText"> *@
@*                 <h2>Drop files to upload.</h2> *@
@*             </div> *@
@*             <InputFile class="@($"fileDrop btn btn-light w-100 {(_uploading ? "disabled" : "")}")" OnChange="FileDrop" multiple> *@
@*             </InputFile> *@
@*         </div> *@
@*     } *@
@* *@
@*     @if (Type == UploadType.Requested && !Link!.LinkClosed) *@
@*     { *@
@*         <div class="my-4 d-flex justify-content-end"> *@
@*             <button class="@((_uploading ? "disabled" : "") + " btn btn-success")" @onclick="CloseLink">Confirm upload</button> *@
@*         </div> *@
@*     } *@
@* *@
@*     <table class="table table-sm table-striped"> *@
@*         <thead> *@
@*         <tr> *@
@*             <th>Name</th> *@
@*             <th>Remove</th> *@
@*             <th>Done</th> *@
@*         </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*         @foreach (var file in Files) *@
@*         { *@
@*             <tr> *@
@*                 <td>@file.Name</td> *@
@*                 <td> *@
@*                     @if (Link?.LinkClosed == false) *@
@*                     { *@
@*                         @if (!file.Done) *@
@*                         { *@
@*                             <button class="btn btn-danger" @onclick="() => CancelUpload(file)">Cancel</button> *@
@*                         } *@
@*                         else *@
@*                         { *@
@*                             <button class="btn btn-danger" @onclick="() => RemoveFromList(file)">Remove</button> *@
@*                         } *@
@*                     } *@
@*                 </td> *@
@*                 <td> *@
@*                     @if (file.Done) *@
@*                     { *@
@*                         <div class="text-success">Done!</div> *@
@*                     } *@
@*                     else *@
@*                     { *@
@*                         <progress class="progress" max="100" value="@file.Progress"></progress> *@
@*                     } *@
@*                 </td> *@
@*             </tr> *@
@*         } *@
@*         </tbody> *@
@*     </table> *@
@* </div> *@
@* *@
@* @code { *@
@* *@
@*     [Parameter] *@
@*     public UploadType Type { get; set; } = UploadType.Upload; *@
@* *@
@*     [Parameter] *@
@*     public Guid LinkId { get; set; } *@
@* *@
@*     [Parameter] *@
@*     public EventCallback OnFileUploaded { get; set; } *@
@* *@
@*     private Link? Link { get; set; } *@
@* *@
@*     string FolderName { get; set; } = ""; *@
@*     List<UploadFileModel> Files { get; set; } = []; *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         Link = await LinksService.Get(LinkId); *@
@*     } *@
@* *@
@*     public async Task Reload() *@
@*     { *@
@*         Link = await LinksService.Get(LinkId); *@
@*     } *@
@* *@
@*     private bool _uploading = false; *@
@* *@
@*     private async Task FileDrop(InputFileChangeEventArgs obj) *@
@*     { *@
@*         var files = obj.GetMultipleFiles(10000); *@
@* *@
@*         AddFilesToList(files); *@
@*         _uploading = true; *@
@*         await OnFileUploaded.InvokeAsync(); *@
@*         foreach (var file in Files) *@
@*         { *@
@*             if (file.Done) *@
@*                 continue; *@
@* *@
@*             var token = file.CancellationTokenSource.Token; *@
@* *@
@*             try *@
@*             { *@
@*                 await using var stream = file.OpenReadStream(53_687_091_200, token); *@
@*                 await FileManager.UploadFile(Link!.Folder, file.Name, stream, progress => *@
@*                 { *@
@*                     var oldProgress = file.Progress; *@
@*                     file.Progress = (int)(progress * 100 / stream.Length); *@
@* *@
@*                     if (oldProgress != file.Progress) *@
@*                         StateHasChanged(); *@
@*                 }, token); *@
@*             } *@
@*             catch (OperationCanceledException) *@
@*             { *@
@*                 await RemoveFromList(file); *@
@*                 StateHasChanged(); *@
@*                 continue; *@
@*             } *@
@* *@
@*             file.Progress = 100; *@
@*         } *@
@* *@
@*         _uploading = false; *@
@*     } *@
@* *@
@*     private void AddFilesToList(IEnumerable<IBrowserFile> files) *@
@*     { *@
@*         foreach (var file in files) *@
@*         { *@
@*             if (Files.Any(x => x.Name == file.Name)) *@
@*                 continue; // TODO: Show possibility to replace file *@
@* *@
@*             Files.Add(new UploadFileModel *@
@*             { *@
@*                 Name = file.Name, *@
@*                 Size = file.Size, *@
@*                 OpenReadStream = file.OpenReadStream, *@
@*                 CancellationTokenSource = new CancellationTokenSource() *@
@*             }); *@
@*         } *@
@*     } *@
@* *@
@*     private async Task<User?> GetUserIdentity() *@
@*     { *@
@*         var identity = (await GetAuthenticationStateAsync.GetAuthenticationStateAsync()).User.Identity as ClaimsIdentity; *@
@* *@
@*         if (identity == null || identity.IsAuthenticated == false) *@
@*             return null; *@
@* *@
@*         return identity.MapToUser(); *@
@*     } *@
@* *@
@*     private async Task RemoveFromList(UploadFileModel file) *@
@*     { *@
@*         if (file.Done) *@
@*         { *@
@*             await FileManager.DeleteFile(Link!.Folder, file.Name); *@
@*         } *@
@* *@
@*         Files.Remove(file); *@
@*     } *@
@* *@
@*     private void CancelUpload(UploadFileModel file) *@
@*     { *@
@*         file.CancellationTokenSource.Cancel(); *@
@*     } *@
@* *@
@*     private async Task CloseLink() *@
@*     { *@
@*         var user = await GetUserIdentity(); *@
@*         await LinksService.CloseLink(Link!, user?.UserName); *@
@*         StateHasChanged(); *@
@*     } *@
@* *@
@* } *@