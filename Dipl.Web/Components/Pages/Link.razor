@page "/link/{linkId:guid}"
@using Dipl.Business.Services;
@using Dipl.Business.Services.Interfaces
@using Dipl.Business
@inject LinksService LinksService
@inject IStoreService StoreService
@inject AppDbContext DbContext

<div class="container">
    <div class="pl-auto my-2">
        @if (Files.Length == 1)
        {
            <a class="btn btn-primary" href="/download/@LinkId/@Files[0].Name" download="@Files[0].Name">
                <span>
                    Download
                    file
                </span>
            </a>
        }
        else if (Files.Length > 1)
        {
            <a class="btn btn-primary" href="/download/@LinkId" download="@(GetFolderName()).zip">
                <span>
                    Download all
                    files
                </span>
            </a>
        }
    </div>

    <table class="table striped">
        <thead>
        <th>Name</th>
        <th>Download</th>
        </thead>
        <tbody>
        @foreach (var file in Files)
        {
            <tr>
                <td>@file.Name</td>
                <td>
                    <a class="btn btn-primary" href="/download/@LinkId/@file.Name" download="@file.Name">Download</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {

    [Parameter]
    public Guid LinkId { get; set; }

    private Business.Entities.Link? FullLink { get; set; }

    private Dipl.Common.Types.FileInfo[] Files { get; set; } = Array.Empty<Dipl.Common.Types.FileInfo>();

    protected override async Task OnInitializedAsync()
    {
        FullLink = await DbContext.Links.FindAsync(LinkId) ?? throw new Exception("Link not found");
        Files = await StoreService.List(FullLink!.Folder);
    }

    private string GetFolderName()
    {
        return FullLink!.Folder.Split('/').Last();
    }

}