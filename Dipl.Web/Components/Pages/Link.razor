@page "/link/{linkId:guid}/{slotId:guid?}"
@using Dipl.Business
@using Dipl.Business.Services.Interfaces
@using Dipl.Common.Types
@using Dipl.Common.Util

@inject IStoreService StoreService
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<Container>
    @{ var linkWithId = SlotId == null ? "fromUpload/" + LinkId : "fromRequest/" + LinkId + "/" + SlotId.Value; }
    <Row Margin="Margin.Is2.OnY">
        <Column ColumnSize="ColumnSize.IsAuto">
            @if (Files.Length == 1)
            {
                <Button Type="ButtonType.Link" Color="Color.Primary"
                        To="@($"/download/{linkWithId}/{Files[0].Name}")"
                        Download="@Files[0].Name">
                    <Icon Name="IconName.Download" Class="me-2"/>
                    Download file
                </Button>
            }
            else if (Files.Length > 1)
            {
                <Button Type="ButtonType.Link" Color="Color.Primary" To="@("/download/" + linkWithId)">
                    <Icon Name="IconName.Download" Class="me-2"/>
                    Download all files
                </Button>
            }
        </Column>
        <Column Padding="Padding.Is0.FromEnd" ColumnSize="ColumnSize.IsAuto" Class="align-self-center">
            Copy link:
        </Column>
        <Column>
            <Div Class="input-group">
                <TextEdit Disabled="true" Text="@NavigationManager.Uri"></TextEdit>
                <Button Color="Color.Secondary" Clicked="CopyToClipboard">Copy</Button>
            </Div>
        </Column>
    </Row>

    <Table Striped>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Size</TableHeaderCell>
                <TableHeaderCell Width="Width.Auto">Download</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var file in Files)
            {
                <TableRow>
                    <TableRowCell>@file.Name</TableRowCell>
                    <TableRowCell>@FileUtils.BytesToString(file.Size)</TableRowCell>
                    <TableRowCell Style="width: 0;" Class="text-nowrap">
                        <Button Type="ButtonType.Link" Color="Color.Primary"
                                To="@($"/download/{linkWithId}/{file.Name}")"
                                Download="@file.Name">
                            <Icon Name="IconName.Download" Class="me-2"/>
                            Download
                        </Button>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
</Container>

@code {

    [Parameter]
    public Guid LinkId { get; set; }

    [Parameter]
    public Guid? SlotId { get; set; }

    private FileInfo[] Files { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var linkExists = SlotId is not null ? DbContext.RequestLinkUploadSlots.Any(x => x.RequestLinkUploadSlotId == SlotId.Value) : DbContext.UploadLinks.Any(x => x.LinkId == LinkId);

        if (!linkExists)
            throw new Exception("Link not found");

        Files = await StoreService.ListFolder($"{LinkId}/{SlotId}") ?? [];
    }

    private async Task CopyToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", NavigationManager.Uri);
    }

}