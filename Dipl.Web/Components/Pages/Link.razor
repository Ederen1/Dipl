@page "/link/{linkId:guid}"
@using Dipl.Business
@using Dipl.Business.Entities
@using Dipl.Business.Services
@using Dipl.Business.Services.Interfaces
@using Dipl.Common.Types

@inject UploadLinksService UploadLinksService
@inject IStoreService StoreService
@inject AppDbContext DbContext

<Container>
    <Row>
        <Column>
            <div class="my-2">
                @if (Files.Length == 1)
                {
                    <Button Type="ButtonType.Link" Color="Color.Primary" To="@($"/download/@LinkId/{Files[0].Name}")" Download="@Files[0].Name">
                        <Icon Name="IconName.Download" Class="me-2" />
                        Download file
                    </Button>
                }
                else if (Files.Length > 1)
                {
                    <Button Type="ButtonType.Link"  Color="Color.Primary" To="@("/download/" + LinkId)">
                        <Icon Name="IconName.Download" Class="me-2" />
                        Download all files
                    </Button>
                }
            </div>
        </Column>
    </Row>

    <Table Striped>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Download</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var file in Files)
            {
                <TableRow>
                    <TableRowCell>@file.Name</TableRowCell>
                    <TableRowCell>
                        <Button Type="ButtonType.Link"  Color="Color.Primary"
                                To="@($"/download/{LinkId}/{file.Name}")"
                                Download="@file.Name">
                            <Icon Name="IconName.Download" Class="me-2" />
                            Download
                        </Button>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
</Container>

@code {
    [Parameter]
    public Guid LinkId { get; set; }

    private BaseLink? FullLink { get; set; }

    private FileInfo[] Files { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        FullLink = DbContext.UploadLinks.FirstOrDefault(x => x.UploadLinkId == LinkId)
        ?? (BaseLink?)DbContext.RequestLinks.FirstOrDefault(x => x.RequestLinkId == LinkId);

        Files = await StoreService.List(FullLink!.Folder);
    }
}