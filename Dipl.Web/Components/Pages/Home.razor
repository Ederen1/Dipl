@page "/"
@using Dipl.Business.Services
@inject UserAuthenticationService UserAuthenticationService

@attribute [AllowAnonymous]

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
@* *@
@* <Container> *@
@*     <Card Margin="Margin.Is2.FromTop"> *@
@*         <CardBody> *@
@*             <CardTitle Size="3">Upload or request files</CardTitle> *@
@*             <Button Color="Color.Primary" Type="ButtonType.Link" To="/upload">Upload file</Button> *@
@*             <AuthorizeView> *@
@*                 <Authorized> *@
@*                     <Button Color="Color.Secondary" Type="ButtonType.Link" To="/request">Request file</Button> *@
@*                 </Authorized> *@
@*             </AuthorizeView> *@
@*         </CardBody> *@
@*     </Card> *@
@* </Container> *@
<Container>
    <Card>
        <CardHeader Padding="Padding.Is0" Overflow="Overflow.Hidden">
            <CardTitle Style="font-size: 0;">
                <Button Size="Size.Large" Border="Border.RoundedZero" Color="IsRequest ? Color.Light : Color.Primary"
                        Clicked="() => IsRequest = false">Send files
                </Button>
                @if (IsLoggedIn)
                {
                    <Button Size="Size.Large" Border="Border.RoundedZero" Color="IsRequest ? Color.Primary : Color.Light"
                            Clicked="() => IsRequest = true">Request files
                    </Button>    
                }
            </CardTitle>
        </CardHeader>
        <CardBody>
            @if (IsRequest)
            {
                <FileRequest></FileRequest>
            }
            else
            {
                <FileUpload></FileUpload>
            }
        </CardBody>
    </Card>
</Container>

@code {
    bool IsRequest { get; set; }
    bool IsLoggedIn { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoggedIn = await UserAuthenticationService.IsLoggedIn();
    }

}