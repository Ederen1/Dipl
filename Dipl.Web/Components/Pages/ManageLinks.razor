@page "/manageLinks"
@using Dipl.Business
@using Dipl.Business.Entities
@using Dipl.Business.Services
@using Dipl.Business.Services.Interfaces
@using Dipl.Common.Util
@using Microsoft.EntityFrameworkCore

@inject UsersService UsersService
@inject AppDbContext DbContext
@inject IStoreService StoreService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<Container>
    <h1 class="mb-4">Link Management</h1>

    <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Tab Name="requestLinks">
                <span><Icon Name="IconName.UserPlus"/> Request Links (@RequestLinks.Count())</span>
            </Tab>
            <Tab Name="uploadLinks">
                <span><Icon Name="IconName.FileUpload"/> Upload Links (@UploadLinks.Count())</span>
            </Tab>
        </Items>
        <Content>
            <TabPanel Name="requestLinks">
                @if (!RequestLinks.Any())
                {
                    <div class="text-center py-8 text-muted">No request links found</div>
                }
                else
                {
                    @foreach (var link in RequestLinks)
                    {
                        <Card Margin="Margin.Is4.FromTop" Shadow="Shadow.Small">
                            <CardHeader>
                                <Row>
                                    <Column>
                                        <CardTitle Size="3">@link.LinkTitle</CardTitle>
                                        <CardSubtitle Margin="Margin.Is3.FromTop">
                                            <Icon Name="IconName.Clock"/>
                                            Created @link.Created by @link.CreatedBy.UserName
                                        </CardSubtitle>
                                    </Column>
                                    <Column ColumnSize="ColumnSize.IsAuto" Padding="Padding.Is2.FromEnd">
                                        <Div Flex="Flex.JustifyContent.End">
                                            @if (link.IsProtected)
                                            {
                                                <Badge Color="Color.Danger" Margin="Margin.Is1.OnX">
                                                    <Icon Margin="Margin.Is1.FromEnd" Name="IconName.Lock"/>
                                                    Protected
                                                </Badge>
                                            }
                                            @if (link.NotifyOnUpload)
                                            {
                                                <Badge Color="Color.Primary" Margin="Margin.Is1.OnX">
                                                    <Icon Margin="Margin.Is1.FromEnd" Name="IconName.Bell"/>
                                                    Notifications
                                                </Badge>
                                            }
                                        </Div>
                                    </Column>
                                </Row>
                            </CardHeader>
                            <CardBody>
                                <div class="d-flex flex-wrap gap-2 mb-4">
                                    <div>
                                        <Icon Margin="Margin.Is1.FromEnd" Name="IconName.FileUpload"/>
                                        <span>Size Limit: @FileUtils.BytesToString(link.AllFilesSizeLimit)</span>
                                    </div>
                                    @if (link.AllowedExtensions.Any())
                                    {
                                        <div>
                                            <span>Allowed: @string.Join(", ", link.AllowedExtensions)</span>
                                        </div>
                                    }
                                </div>

                                <Text>@link.Message</Text>

                                <div class="d-flex justify-content-between align-items-center mb-1 mt-4">
                                    <Text>
                                        <span class="font-weight-bold">Upload Slots:</span>
                                        @link.UploadSlots.Count(s => s.Uploaded.HasValue)/@link.UploadSlots.Count() completed
                                    </Text>
                                </div>

                                <div class="mt-2">
                                    <h5>Upload Slots:</h5>
                                    @foreach (var slot in link.UploadSlots)
                                    {
                                        <div class="d-flex align-items-center bg-light p-3 mb-2 rounded">
                                            <div class="d-flex flex-column">
                                                <div class="d-flex align-items-center gap-2 mb-1">
                                                    <Icon Name="IconName.Mail"/>
                                                    @if (slot.Uploaded != null)
                                                    {
                                                        <Anchor
                                                            To="@("/link/" + link.LinkId + "/" + slot.RequestLinkUploadSlotId)"
                                                            Class="font-weight-bold">@slot.Email</Anchor>
                                                        <Anchor
                                                            To="@($"/download/fromRequest/{link.LinkId}/{slot.RequestLinkUploadSlotId}")"
                                                            download>
                                                            <Icon Name="IconName.Download"></Icon>
                                                        </Anchor>
                                                    }
                                                    else
                                                    {
                                                        <span>@slot.Email</span>
                                                    }
                                                    <Button Size="Size.Small" Color="Color.Light"
                                                            Clicked="() => CopyRequestLink(link, slot)">
                                                        <Icon Name="IconName.Copy"></Icon>
                                                    </Button>
                                                </div>
                                                @if (!string.IsNullOrEmpty(slot.Message))
                                                {
                                                    <p class="mb-1">@slot.Message</p>
                                                }
                                                <div class="small text-muted">
                                                    Status: @(slot.Uploaded.HasValue ? $"Uploaded on {slot.Uploaded.Value}" : "Pending")
                                                </div>
                                            </div>
                                            <Div Margin="Margin.IsAuto.FromStart" Flex="Flex.InlineFlex" Gap="Gap.Is2">
                                                <ConfirmButton Size="Size.Small" Color="Color.Danger"
                                                               OnConfirm="() => RemoveUploadSlot(link, slot)">Delete
                                                </ConfirmButton>
                                            </Div>
                                        </div>
                                    }
                                </div>
                            </CardBody>
                            <CardFooter>
                                <Div Flex="Flex.JustifyContent.End">
                                    <ConfirmButton Color="Color.Danger" OnConfirm="() => RemoveRequestLink(link)">Delete
                                        link
                                    </ConfirmButton>
                                </Div>
                            </CardFooter>
                        </Card>
                    }
                }
            </TabPanel>
            <TabPanel Name="uploadLinks">
                @if (!UploadLinks.Any())
                {
                    <div class="text-center py-8 text-muted">No upload links found</div>
                }
                else
                {
                    @foreach (var link in UploadLinks)
                    {
                        <Card Margin="Margin.Is4.FromTop" Shadow="Shadow.Small">
                            <CardHeader>
                                <CardTitle Size="3">
                                    <Anchor To="@("/link/" + link.LinkId)">@link.LinkTitle</Anchor>
                                    <Anchor Margin="Margin.Is2.FromStart" To="@($"/download/fromUpload/{link.LinkId}")"
                                            download>
                                        <Icon IconSize="IconSize.Small" Name="IconName.Download"></Icon>
                                    </Anchor>
                                </CardTitle>
                                <CardSubtitle Margin="Margin.Is3.FromTop">
                                    <Icon Name="IconName.Clock"/>
                                    Created @link.Created by @link.CreatedBy.UserName
                                </CardSubtitle>
                            </CardHeader>
                            <CardBody>
                                <Text>@link.Message</Text>
                            </CardBody>
                            <CardFooter>
                                <Div Flex="Flex.JustifyContent.End">
                                    <ConfirmButton Color="Color.Danger" OnConfirm="() => RemoveUploadLink(link)">Delete
                                        link
                                    </ConfirmButton>
                                </Div>
                            </CardFooter>
                        </Card>
                    }
                }
            </TabPanel>
        </Content>
    </Tabs>
</Container>

@code {
    private string selectedTab = "requestLinks";
    private User _currentUser;

    private List<RequestLink> RequestLinks { get; set; } = [];
    private List<UploadLink> UploadLinks { get; set; } = [];

    private string _tooltipText = "";

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await UsersService.GetCurrentUser();
        await ReloadData();
    }

    private async Task ReloadData()
    {
        RequestLinks = await DbContext.RequestLinks.Where(link => link.CreatedById == _currentUser.UserId).Include(requestLink => requestLink.UploadSlots).OrderBy(x => x.Created).ToListAsync();
        UploadLinks = await DbContext.UploadLinks.Where(link => link.CreatedById == _currentUser.UserId).OrderBy(x => x.Created).ToListAsync();
    }

    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }

    private async Task RemoveRequestLink(RequestLink link)
    {
        await StoreService.DeleteDirectory(link.LinkId.ToString(), true);
        DbContext.RequestLinks.Remove(link);
        await DbContext.SaveChangesAsync();
        await ReloadData();
    }

    private async Task RemoveUploadLink(UploadLink link)
    {
        await StoreService.DeleteDirectory(link.LinkId.ToString(), true);
        DbContext.UploadLinks.Remove(link);
        await DbContext.SaveChangesAsync();
        await ReloadData();
    }

    private async Task RemoveUploadSlot(RequestLink parentLink, RequestLinkUploadSlot slot)
    {
        await StoreService.DeleteDirectory($"{parentLink.LinkId}/{slot.RequestLinkUploadSlotId}", true);
        parentLink.UploadSlots.Remove(slot);
        await DbContext.SaveChangesAsync();
        await ReloadData();
    }

    private async Task CopyRequestLink(RequestLink link, RequestLinkUploadSlot slot)
    {
        var linkText = $"{NavigationManager.BaseUri}request/{link.LinkId}/{slot.RequestLinkUploadSlotId}";
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", linkText);
        _tooltipText = "Copied!";
        await Task.Delay(800);
        // _tooltipText = "";
    }

}
