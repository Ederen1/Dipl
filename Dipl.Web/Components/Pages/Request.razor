@page "/request/{linkId:guid}/{slotId:guid}"
@using System.Security.Cryptography
@using System.Xml.Schema
@using Dipl.Business
@using Dipl.Business.Entities
@using Dipl.Business.Services
@using Dipl.Business.Services.Interfaces
@using Dipl.Common.Types
@using Dipl.Common.Util
@using Dipl.Web.Services
@using Microsoft.EntityFrameworkCore

@inject FileManagerService FileManagerService
@inject AppDbContext DbContext
@inject IConfiguration Configuration
@inject IStoreService StoreService
@inject UserAuthenticationService UserAuthentication
@inject IJSRuntime JsRuntime


<Container>
    @if (!_userConfirmed && Slot.RequestLink.IsProtected)
    {
        <Validations @ref="_emailValidations" ValidateOnLoad="false" Mode="ValidationMode.Manual">
            <Field ColumnSize="ColumnSize.Is6">
                <Validation Validator="ValidateMatchingEmail">
                    <FieldLabel>Please enter email address this hyperlink was sent to</FieldLabel>
                    <TextEdit Role="TextRole.Email" Placeholder="Email...">
                        <Feedback>
                            <ValidationError/>
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>

            <Field ColumnSize="ColumnSize.Is2">
                <Button Type="ButtonType.Submit" Clicked="SubmitEmail" Color="Color.Primary">Submit</Button>
            </Field>
        </Validations>
    }
    else
    {
        @if (_closed && !_canViewAfterClose)
        {
            <Div Margin="Margin.IsAuto.FromStart.IsAuto.FromEnd">
                Files successfully uploaded!
            </Div>
        }
        else
        {
            <Field>
                <FieldLabel>Message for user</FieldLabel>
                <FieldBody>
                    <MemoEdit Rows="5" @bind-Text="@Slot.Message" Placeholder="Message for user..."
                              Disabled="_closed"></MemoEdit>
                </FieldBody>
            </Field>

            <Field>
                <FieldLabel>Upload files here</FieldLabel>
                <FieldBody Border="Border.Is1.Danger">
                    <Dipl.Web.Components.FilePicker Accept="Slot.RequestLink.AllowedExtensions"
                                                    Value="_filesToUpload"
                                                    ValueChanged="value => { _filesToUpload = value; }"
                                                    @bind-DeleteOnlyValue="_alreadyPresentFiles"
                                                    Disabled="_closed">
                    </Dipl.Web.Components.FilePicker>
                </FieldBody>
                @if (filePickerValidationMessage is not null)
                {
                    <Span TextColor="TextColor.Danger">filePickerValidationMessage</Span>
                }
            </Field>

            @if (_closed && _canReopen)
            {
                <Button Width="Width.Is100" Color="Color.Success"
                        Clicked="() => { _closed = false; }">Reopen
                </Button>
            }
            else if (!_closed)
            {
                <Button Width="Width.Is100" Color="Color.Primary" Type="ButtonType.Submit" Clicked="Submit">Submit
                </Button>
            }
        }
    }
</Container>

<Modal @ref="_modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Protected upload</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Validations ValidateOnLoad="false" @ref="_validations">
                <Validation @ref="_passwordValidation" Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Password</FieldLabel>
                        <TextEdit @bind-Text="Password" Role="TextRole.Password" Placeholder="Enter password..."/>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@SubmitPasswordModal">Confirm</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {

    [Parameter]
    public Guid LinkId { get; set; }

    [Parameter]
    public Guid SlotId { get; set; }

    private Validations _validations = null!;
    private Validations _emailValidations = null!;
    private bool _closed;
    private bool _canReopen;
    private bool _canViewAfterClose;
    private List<IFileEntry> _filesToUpload = [];
    private List<FileInfo> _alreadyPresentFiles = [];
    private Modal _modalRef = null!;
    private string Password = "";

    private RequestLinkUploadSlot Slot { get; set; } = null!;

    private bool _userConfirmed;
    private string? filePickerValidationMessage;
    private Validation _passwordValidation;

    protected override async Task OnParametersSetAsync()
    {
        Slot = await DbContext.RequestLinkUploadSlots.Include(x => x.RequestLink).ThenInclude(x => x.CreatedBy).FirstOrDefaultAsync(x => x.RequestLinkUploadSlotId == SlotId) ?? throw new Exception("Unable to find slot");

        // Check if the user responding to a request is logged in, then allow the access
        var currentUser = await UserAuthentication.GetUserInfo();
        if (!Slot.RequestLink.IsProtected || currentUser?.Email == Slot.Email || currentUser?.Email == Slot.RequestLink.CreatedBy.Email)
        {
            _userConfirmed = true;
            await LoadFilesAndLogic();
        }
    }

    private void ValidateMatchingEmail(ValidatorEventArgs e)
    {
        var possibleEmail = Convert.ToString(e.Value);
        var parsedEmail = possibleEmail?.ParseAsEmail();
        if (parsedEmail is null)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Invalid email.";
            return;
        }

        if (Slot.Email.Trim() != parsedEmail)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Email does not match the one this link was sent to";
            return;
        }

        e.Status = ValidationStatus.Success;
    }

    private async Task LoadFilesAndLogic()
    {
        _canViewAfterClose = Configuration.GetValue<bool>("ClosedLinkCanView");
        _canReopen = Configuration.GetValue<bool>("ClosedLinkCanReopen");
        _closed = Slot.Uploaded != null;
        _alreadyPresentFiles = (await StoreService.ListFolder($"{Slot.RequestLinkId}/{Slot.RequestLinkUploadSlotId}") ?? []).ToList();
    }
    
    private async Task Submit()
    {
        if (ValidateFiles() is { } errorMessage)
        {
            filePickerValidationMessage = errorMessage;
            return;
        }
        
        if (Slot.RequestLink.VerifierHash is not null)
            await _modalRef.Show();
        else
        {
            _alreadyPresentFiles = await FileManagerService.RespondToFileRequest(Slot, _filesToUpload, _alreadyPresentFiles, Password);
            _filesToUpload.Clear();
            _closed = true;
        }
    }

    private async Task SubmitEmail()
    {
        if (!await _emailValidations.ValidateAll())
            return;

        _userConfirmed = true;
        await LoadFilesAndLogic();
    }

    private string? ValidateFiles()
    {
        if (_filesToUpload.Count == 0 && _alreadyPresentFiles.Count == 0)
            return "No files to upload";

        var extensionsInvalid = _filesToUpload.Any(x => !Slot.RequestLink.AllowedExtensions.Any(ex => x.Name.EndsWith(ex)));
        if (Slot.RequestLink.AllowedExtensions.Length > 0 && extensionsInvalid)
            return "Some files have disallowed extensions. Please remove them";

        var allFileSizes = _filesToUpload.Select(x => x.Size).Concat(_alreadyPresentFiles.Select(x => x.Size)).ToList();
        if (allFileSizes.Sum() > Slot.RequestLink.AllFilesSizeLimit)
        {
            var size = FileUtils.BytesToString(allFileSizes.Sum() - Slot.RequestLink.AllFilesSizeLimit);
            return $"You are {size} over the limit for capacity";
        }

        return null;
    }
    

    private async Task HideModal()
    {
        await _modalRef.Hide();
    }

    private async Task SubmitPasswordModal()
    {
        if (await _validations.ValidateAll())
        {
            try
            {
                await HideModal();
                _alreadyPresentFiles = await FileManagerService.RespondToFileRequest(Slot, _filesToUpload, _alreadyPresentFiles, Password);
                _filesToUpload.Clear();
                _closed = true;
                Password = "";
            }
            catch(CryptographicException e)
            {
                await _modalRef.Show();
                _passwordValidation.NotifyValidationStatusChanged(ValidationStatus.Error, ["Password does not match"]);
            }
        }
        
    }

}