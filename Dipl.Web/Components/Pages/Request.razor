@page "/request/{linkId:guid}/{slotId:guid}"
@using Dipl.Business
@using Dipl.Business.Entities
@using Dipl.Business.Services.Interfaces
@using Dipl.Common.Types
@using Dipl.Web.Models
@using Dipl.Web.Services

@inject FileManagerService FileManagerService
@inject AppDbContext DbContext
@inject IConfiguration Configuration
@inject IStoreService StoreService


<Container>
    @if (_closed && !_canViewAfterClose)
    {
        <Div Margin="Margin.IsAuto.FromStart.IsAuto.FromEnd">
            Files successfully uploaded!
        </Div>
    }
    else
    {
        <Validations @ref="_validations" ValidateOnLoad="false" >
            <Field>
                <FieldLabel>Message for user</FieldLabel>
                <FieldBody>
                    <MemoEdit Rows="5" @bind-Text="@Slot.Message" Placeholder="Message for user..."
                              Disabled="_disableEdit"></MemoEdit>
                </FieldBody>
            </Field>

            <Field>
                <FieldLabel>Upload files here</FieldLabel>
                <FieldBody>
                    <Dipl.Web.Components.FilePicker @bind-Value="_filesToUpload" @bind-DeleteOnlyValue="_alreadyPresentFiles" Disabled="_disableEdit"/>
                </FieldBody>
            </Field>

            @if (_closed && _canReopen)
            {
                <Button Width="Width.Is100" Color="Color.Success"
                        Clicked="() => { _closed = false; _disableEdit = false; }">Reopen
                </Button>
            }
            else if(!_closed)
            {
                <Button Width="Width.Is100" Color="Color.Primary" Type="ButtonType.Submit" Clicked="Submit">Submit
                </Button>
            }
        </Validations>
    }

</Container>

@code {

    [Parameter]
    public Guid LinkId { get; set; }

    [Parameter]
    public Guid SlotId { get; set; }

    private Validations _validations = null!;
    private bool _closed;
    private bool _canReopen;
    private bool _canViewAfterClose;
    private bool _disableEdit;
    private List<IFileEntry> _filesToUpload = [];
    private List<FileInfo> _alreadyPresentFiles = [];

    private RequestLinkUploadSlot Slot { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        _canViewAfterClose = Configuration.GetValue<bool>("ClosedLinkCanView");
        _canReopen = Configuration.GetValue<bool>("ClosedLinkCanReopen");
        Slot = await DbContext.RequestLinkUploadSlots.FindAsync(SlotId) ?? throw new Exception("Unable to find slot");
        _closed = Slot.Uploaded != null;
        if (_closed)
            _alreadyPresentFiles = (await StoreService.ListFolder($"{Slot.RequestLinkId}/{Slot.RequestLinkUploadSlotId}") ?? []).ToList();
        
        _disableEdit = _closed;
    }

    private async Task Submit()
    {
        if (!await _validations.ValidateAll())
            return;

        if (_alreadyPresentFiles.Count == 0 && _filesToUpload.Count == 0)
            return;

        _disableEdit = true;
        _alreadyPresentFiles = await FileManagerService.RespondToFileRequest(Slot, _filesToUpload, _alreadyPresentFiles);
        _filesToUpload.Clear();
        _closed = true;
    }

}