@page "/request/{linkId:guid}/{slotId:guid}"
@using Dipl.Business
@using Dipl.Business.Entities
@using Dipl.Web.Models
@using Dipl.Web.Services

@inject FileManagerService FileManagerService
@inject AppDbContext DbContext
@inject IConfiguration Configuration


<Container>
    @if (_closed && !_canViewAfterClose)
    {
        <Div Margin="Margin.IsAuto.FromStart.IsAuto.FromEnd">
            Files successfully uploaded!
        </Div>
    }
    else
    {
        <Validations @ref="_validations" ValidateOnLoad="false">
            <Field>
                <FieldLabel>Message for user</FieldLabel>
                <FieldBody>
                    <MemoEdit Rows="5" @bind-Text="@_model.Message" Placeholder="Message for user..."
                              Disabled="_disableEdit"></MemoEdit>
                </FieldBody>
            </Field>

            <Field>
                <FieldLabel>Upload files here</FieldLabel>
                <FieldBody>
                    <Dipl.Web.Components.FilePicker @bind-Value="_model.FilesToUpload" Disabled="_disableEdit"/>
                </FieldBody>
            </Field>

            @if (_closed && _canReopen)
            {
                <Button Width="Width.Is100" Color="Color.Success"
                        Clicked="() => { _closed = false; _disableEdit = false; }">Reopen
                </Button>
            }
            else if(!_closed)
            {
                <Button Width="Width.Is100" Color="Color.Primary" Type="ButtonType.Submit" Clicked="Submit">Submit
                </Button>
            }
        </Validations>
    }

</Container>

@code {

    [Parameter]
    public Guid LinkId { get; set; }

    [Parameter]
    public Guid SlotId { get; set; }

    private Validations _validations = null!;
    private readonly RequestLinkResponseModel _model = new();
    private bool _closed;
    private bool _canReopen;
    private bool _canViewAfterClose;
    private bool _disableEdit;

    private RequestLinkUploadSlot? Slot { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _canViewAfterClose = Configuration.GetValue<bool>("ClosedLinkCanView");
        _canReopen = Configuration.GetValue<bool>("ClosedLinkCanReopen");
        Slot = await DbContext.RequestLinkUploadSlots.FindAsync(SlotId);
        _closed = Slot?.Uploaded != null;
        _disableEdit = _closed;
    }

    private async Task Submit()
    {
        if (!await _validations.ValidateAll())
            return;

        if (Slot is null)
            return;

        _disableEdit = true;
        await FileManagerService.RespondToFileRequest(_model, Slot);
        _closed = true;
    }

}