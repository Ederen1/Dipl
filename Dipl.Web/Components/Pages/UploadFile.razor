@using Dipl.Web.Components.Enums;
@using Dipl.Business.Models
@using Dipl.Business.Services
@using Dipl.Business.Entities
@using Dipl.Business.Extensions
@using System.Security.Claims
@inject LinksService LinksService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager Navigator
@rendermode RenderMode.InteractiveServer

@page "/upload"

@if (FileWasUploaded)
{
    <div class="mt-2 container">
        <h3>Copy link: </h3>
        <a href="@(Navigator.BaseUri)link/@LinkId">@(Navigator.BaseUri)link/@LinkId</a>
    </div>
}

<EditForm class="mx-auto col-xl-4 col-md-5 px-4 mt-4" Model="@Model" OnValidSubmit="@UpdateLink" FormName="CreateLink">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <div>
            <label for="sendToEmails">Send to: </label>
            <InputText class="form-control" id="sendToEmails" @bind-Value="Model.SendToSeparatedByCommas"></InputText>
            <ValidationMessage For="() => Model.SendToSeparatedByCommas"/>
        </div>
        <div>
            <label for="linkName">Link name: </label>
            <InputText class="form-control" id="linkName" @bind-Value="Model.LinkName"></InputText>
            <ValidationMessage For="() => Model.LinkName"/>
        </div>
        <div>
            <label for="messageForUser">Message for user: </label>
            <InputTextArea class="form-control" id="messageForUser" @bind-Value="Model.MessageForUser"></InputTextArea>
        </div>
        @if (_user is not null)
        {
            <div class="mt-2">
                <label for="notifyOnUpload">Notify me when user uploads files: </label>
                <InputCheckbox class="form-check-input ml-2" id="notifyOnUpload" @bind-Value="Model.NotifyOnUpload"></InputCheckbox>
            </div>    
        }
        <button class="btn btn-success mt-4 mx-auto" type="submit">Save</button>
    </div>
</EditForm>

<Upload LinkId="LinkId" Type="@(UploadType.Upload)" OnFileUploaded="() => FileWasUploaded = true"></Upload>

@code {
    private User? _user;
    private UploadLinkModel Model { get; set; } = new();
    private Guid LinkId { get; set; } = Guid.NewGuid();
    private bool FileWasUploaded { get; set; }

    private async Task<User?> GetUserIdentity()
    {
        var identity = (await GetAuthenticationStateAsync.GetAuthenticationStateAsync()).User.Identity as ClaimsIdentity;

        if (identity == null || identity.IsAuthenticated == false)
            return null;

        return identity.MapToUser();
    }
    
    protected override async Task OnInitializedAsync()
    {
        _user = await GetUserIdentity();
        await LinksService.CreateTemporaryLink(LinkId, _user);
    }

    private Task UpdateLink()
    {
        return LinksService.UpdateLink(LinkId, Model);
    }
}
