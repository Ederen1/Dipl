@inject IJSRuntime JsRuntime

<Modal @ref="_modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Protected download</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Validations ValidateOnLoad="false" @ref="_validations">
                <Validation @ref="_passwordValidation" Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Password</FieldLabel>
                        <TextEdit @bind-Text="Password" Role="TextRole.Password" Placeholder="Enter password...">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@Submit">Download</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code{

    [Parameter]
    public required string DownloadUrl { get; set; }

    private Modal _modalRef = null!;
    private string Password { get; set; } = "";
    private Validations _validations = null!;
    private Validation _passwordValidation = null!;
    private string _message = "";

    public Task ShowModal()
    {
        return _modalRef.Show();
    }

    private Task HideModal()
    {
        return _modalRef.Hide();
    }

    private async Task Submit()
    {
        if (!await _validations.ValidateAll())
            return;

        var message = await JsRuntime.InvokeAsync<string?>("downloadPasswordProtectedFile", DownloadUrl, Password);
        if (message is not null)
        {
            _message = message;
            _passwordValidation.NotifyValidationStatusChanged(ValidationStatus.Error, [message]);
        }   
        else
        {
            await HideModal();
            Password = "";
            _message = "";
            _passwordValidation.NotifyValidationStatusChanged(ValidationStatus.Success);
        }
    }

}