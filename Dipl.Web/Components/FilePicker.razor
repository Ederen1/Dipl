@using Blazorise.Icons.FontAwesome
@using Dipl.Common.Types
@using Dipl.Common.Util
@inject IJSRuntime JSRuntime

<div id="picker" class="picker @_disabledClass">
    @if (!Disabled)
    {
        <div class="w-100 d-flex justify-content-center lowest">
            <Span TextColor="TextColor.Muted">Drag and drop files or folders here. Or...</Span>
        </div>

        <div class="w-100 d-flex justify-content-center lowest">
            <Span TextColor="TextColor.Muted">File types limited to: @string.Join(", ", Accept)</Span>
        </div>


        <div class="d-flex gap-2 justify-content-center mx-auto">
            <Button Type="ButtonType.Button" Color="Color.Primary" Clicked="AddFile">Add file
            </Button>
            <Button Type="ButtonType.Button" Color="Color.Secondary" Clicked="AddDirectory">Add
                folder
            </Button>
        </div>
    }
    @foreach (var file in Value)
    {
        <Card>
            <CardBody>
                <CardTitle Padding="Padding.Is0.FromBottom">@file.Name</CardTitle>
                <CardText>
                    <Div Display="Display.Flex">
                        <span>@FileUtils.BytesToString(file.Size)</span>
                        @if (!Disabled)
                        {
                            <Button Padding="Padding.Is0.OnAll" Margin="Margin.IsAuto.FromStart"
                                    Clicked="() => RemoveFile(file)">
                                <Blazorise.Icon Name="FontAwesomeIcons.Trash"/>
                            </Button>
                        }
                    </Div>
                    @{ var fileProgress = _progress.GetValueOrDefault(file, -1); }
                    @if (fileProgress != -1)
                    {
                        <Progress Value="@fileProgress"></Progress>
                    }
                </CardText>
            </CardBody>
        </Card>
    }

    @foreach (var file in DeleteOnlyValue)
    {
        <Card>
            <CardBody>
                <CardTitle Padding="Padding.Is0.FromBottom">@file.Name</CardTitle>
                <CardText>
                    <Div Display="Display.Flex">
                        <span>@FileUtils.BytesToString(file.Size)</span>
                        @if (!Disabled)
                        {
                            <Button Padding="Padding.Is0.OnAll" Margin="Margin.IsAuto.FromStart"
                                    Clicked="() => RemoveFileDeleteOnly(file)">
                                <Blazorise.Icon Name="FontAwesomeIcons.Trash"/>
                            </Button>
                        }
                    </Div>
                </CardText>
            </CardBody>
        </Card>
    }

    <FileEdit Filter="@string.Join(',', Accept)" @ref="_fileEdit" Changed="OnFileChange" Written="Written" Multiple
              Directory="_pickingDirectory"/>
</div>

@code {

    [Parameter]
    public List<IFileEntry> Value { get; set; } = [];

    [Parameter]
    public EventCallback<List<IFileEntry>> ValueChanged { get; set; }

    [Parameter]
    public List<FileInfo> DeleteOnlyValue { get; set; } = [];

    [Parameter]
    public EventCallback<List<FileInfo>> DeleteOnlyValueChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string[] Accept { get; set; } = [];

    private FileEdit _fileEdit = null!;
    private string _disabledClass = "";
    private readonly Dictionary<IFileEntry, int> _progress = [];

    private bool _pickingDirectory = true;

    private async Task AddFile()
    {
        _pickingDirectory = false;
        await InvokeAsync(async () =>
        {
            await Task.Yield();
            await _fileEdit.ShowPicker();
            _pickingDirectory = true;
        });
    }

    private async Task AddDirectory()
    {
        await InvokeAsync(async () =>
        {
            await Task.Yield();
            await _fileEdit.ShowPicker();
            _pickingDirectory = true;
        });
    }

    private async Task RemoveFile(IFileEntry file)
    {
        Value.Remove(file);
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task RemoveFileDeleteOnly(FileInfo file)
    {
        DeleteOnlyValue.Remove(file);
        await DeleteOnlyValueChanged.InvokeAsync(DeleteOnlyValue);
    }

    private async Task OnFileChange(FileChangedEventArgs e)
    {
        List<IFileEntry> append = [];

        // Replace values
        foreach (var file in e.Files)
        {
            var idx = Value.FindIndex(x => x.Name == file.Name);
            if (idx != -1)
                Value[idx] = file;
            else
            {
                var inDelete = DeleteOnlyValue.FirstOrDefault(x => x.Name == file.Name);
                if (inDelete is not null)
                    DeleteOnlyValue.Remove(inDelete);

                append.Add(file);
            }
        }

        Value.AddRange(append);
        await ValueChanged.InvokeAsync(Value);
        await DeleteOnlyValueChanged.InvokeAsync(DeleteOnlyValue);
    }

    private void Written(FileWrittenEventArgs e)
    {
        if (e.Position == e.File.Size)
        {
            _progress.Remove(e.File);
            return;
        }

        _progress[e.File] = (int)((double)e.Position / e.File.Size * 100);
    }

    protected override void OnParametersSet()
    {
        _disabledClass = Disabled ? "disabled" : "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("setupPicker");
    }

}